#!/usr/bin/env bash

# @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”
# Shamelessly copied from https://github.com/gf3/dotfiles
# Screenshot: http://cl.ly/ahSn/Terminal.png

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi;

# Prompt symbol.
PROMPT_SYMBOL="❯";
GIT_UNCOMMITED="+";
GIT_UNSTAGED="!";
GIT_UNTRACKED="?";
GIT_STASHED="⚑";

prompt_git() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null;

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+="${GIT_UNCOMMITED}";
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+="${GIT_UNSTAGED}";
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+="${GIT_UNTRACKED}";
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+="${GIT_STASHED}";
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    [ -n "${s}" ] && s=" ${s}";

    echo -e "${1}${branchName}${gray}${s}";
  else
    return;
  fi;
}

if tput setaf 1 &> /dev/null; then
  tput sgr0; # reset colors
  bold=$(tput bold);
  reset=$(tput sgr0);
  black=$(tput setaf 16);
  blue=$(tput setaf 67);
  cyan=$(tput setaf 110);
  green=$(tput setaf 144);
  red=$(tput setaf 131);
  orange=$(tput setaf 173);
  yellow=$(tput setaf 222);
  purple=$(tput setaf 139);
  violet=$(tput setaf 139);
  gray=$(tput setaf 59);
  white=$(tput setaf 231);
else
  bold='';
  reset="\e[0m";
  black="\e[1;30m";
  blue="\e[1;34m";
  cyan="\e[1;36m";
  green="\e[1;32m";
  red="\e[1;31m";
  orange="\e[1;33m";
  yellow="\e[1;33m";
  purple="\e[1;35m";
  violet="\e[1;35m";
  gray="\e[1;37m";
  white="\e[1;37m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
  user="${red}\u";
else
  user="${orange}\u";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
  host="${white}@${bold}${red}\h${reset} ${white}in ";
else
  host="${white}@${yellow}\h${reset} ${white}in ";
fi;

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # working directory base name
PS1+="\n"; # newline
#PS1+="\[${user}\]"; # username
#PS1+="\[${host}\]"; # host
PS1+="\[${cyan}\]\w"; # working directory full path
PS1+="\$(prompt_git \"${gray} \")"; # Git repository details
PS1+="\[${reset}\]\n";
PS1+="\[${violet}\]${PROMPT_SYMBOL} \[${reset}\]"; # symbol (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
