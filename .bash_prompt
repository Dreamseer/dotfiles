#!/usr/bin/env bash

# Inpsiration:
# - Extravagant Zsh Prompt: http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/
# - Sexy Bash Prompt: https://github.com/gf3/dotfiles
# - Pure: https://github.com/sindresorhus/pure
# Screenshot:
# - https://cl.ly/jzRu/Terminal.png

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi;

# Automatically trim long paths in the prompt (requires Bash 4.x)
PROMPT_DIRTRIM=2

# Prompt symbol.
PROMPT_SYMBOL="❯";
GIT_UNCOMMITED="+";
GIT_UNSTAGED="!";
GIT_UNTRACKED="?";
GIT_STASHED="⚑";

# Dracula colors.
bold='';
reset="\e[0m";
black="\e[0;30m";
red="\e[0;31m";
green="\e[0;32m";
orange="\e[0;33m";
blue="\e[0;34m";
purple="\e[0;35m";
cyan="\e[0;36m";
lightgray="\e[0;37m";
darkgray="\e[1;30m";
lightred="\e[1;31m";
lightgreen="\e[1;32m";
yellow="\e[1;33m";
lightblue="\e[1;34m";
lightpurple="\e[1;35m";
lightcyan="\e[1;36m";
white="\e[1;37m";

prompt_git() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null;

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+="${GIT_UNCOMMITED}";
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+="${GIT_UNSTAGED}";
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+="${GIT_UNTRACKED}";
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+="${GIT_STASHED}";
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    [ -n "${s}" ] && s=" ${s}";

    echo -e "${1}${branchName}${darkgray}${s}";
  else
    return;
  fi;
}

# Show user and hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
  # Highlight the user name when logged in as root.
  if [[ "${USER}" == "root" ]]; then
    ssh_user="${red}\u";
  else
    ssh_user="${orange}\u";
  fi;
  ssh_user+="${white}@${yellow}\h ${white}in ";
else
  ssh_user="";
fi;

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # working directory base name
PS1+="\n"; # newline
PS1+="\[${ssh_user}\]"; # SSH username and host
PS1+="\[${green}\]\w"; # working directory full path
PS1+="\$(prompt_git \"${darkgray} \")"; # Git repository details
PS1+="\[${reset}\]\n";
PS1+="\[${purple}\]${PROMPT_SYMBOL} \[${reset}\]"; # symbol (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
