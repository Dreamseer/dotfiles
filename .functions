# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

# find shorthand
function f() {
	find . -name "$1" 
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Subversion enhancements
function svn() {
	local SVN="/usr/bin/svn"
	local operation=$1
	shift
	local arguments=$@

	case "${operation}" in

		"status"|"stat"|"st")
			${SVN} ${operation} --ignore-externals ${arguments} | grep -v '/._' | grep -v '^X' | grep -v '^Performing' | grep -v '^$' | sed -e 's/^\?.*$/[1;30m\0[m/' -e 's/^!.*$/[1;31m\0[m/' -e 's/^A.*$/[1;32m\0[m/' -e 's/^M.*$/[1;33m\0[m/' -e 's/^D.*$/[0;31m\0[m/'
		;;

#		"diff"|"di")
#			echo $arguments
#			if [[ "$arguments" = *patch* ]] ; then
#				echo "Use svn patch if you want to generate patchfile"
#				wait
#			fi;
#			${SVN} ${operation} ${arguments} --diff-cmd `which diff` -x "-u -w"|colordiff|less -R
#		;;

		"update"|"up")
			local old_revision=`${SVN} info ${arguments} | awk '/^Revision:/ {print $2}'`
			local first_update=$((${old_revision} + 1))
			${SVN} ${operation} ${arguments}
			local new_revision=`${SVN} info ${arguments} | awk '/^Revision:/ {print $2}'`
			if [ ${new_revision} -gt ${old_revision} ]; then
				svn log -v -rHEAD:${first_update} ${arguments}
			else
				echo "No changes since last update."
			fi
		;;

		"log")
			${SVN} ${operation} ${arguments}|sed -e 's/^-\+$/[1;32m\0[m/' -e 's/^r[0-9]\+.\+$/[1;31m\0[m/'
		;;

		"blame"|"praise"|"annotate"|"ann")
			${SVN} ${operation} ${arguments}|sed -e 's/^\(\s*[0-9]\+\s*\)\([^ ]\+\s*\)\(.*\)$/[1;32m\1[m[1;31m\2[m\3/'
		;;

		"patch")
			${SVN} diff
		;;

		*)
			${SVN} ${operation} ${arguments}
		;;

	esac
}
